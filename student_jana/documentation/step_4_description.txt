**Задание**
Познакомиться с Maven

**Краткое описание процесса выполнения**
Прочитать информацию в интернете

**Что применил/использовал, чему научился в процессе выполнения задания?**
узнала про структуру Maven и почему она именно такая

**Сколько потратил времени на выполнение задачи?**
10 минут

**Как убедился в том, что задание выполнено правильно?**
нашла ответ на поставленный вопрос

**Комментарий в свободной форме**
Maven структура проекта была создана для упрощения и стандартизации управления проектами в Java-разработке. Применение этой структуры в современной разработке обусловлено несколькими важными причинами:

1. Стандартизация и Конвенции:
Maven предоставляет стандартную структуру проекта, что упрощает навигацию и работу с проектами для разработчиков. Например, исходный код размещается в директории src/main/java, а тесты — в src/test/java. Это уменьшает необходимость в конфигурациях, так как Maven следует принципу "convention over configuration".

2. Управление Зависимостями:
Maven автоматически управляет библиотеками и зависимостями проекта через файл pom.xml. Это облегчает добавление, удаление и обновление зависимостей, а также предотвращает конфликты версий библиотек.

3. Жизненный Цикл Сборки:
Maven управляет полным жизненным циклом сборки проекта, включая компиляцию, тестирование, упаковку, развертывание и документирование. Это позволяет разработчикам сосредоточиться на написании кода, а не на настройке процессов сборки.

4. Расширяемость:
Maven легко расширяем с помощью плагинов. Существует множество плагинов, которые могут быть использованы для выполнения различных задач, таких как запуск тестов, создание JAR/WAR файлов, генерация документации и многое другое.

5. Репозитории:
Maven использует централизованные репозитории для хранения артефактов (библиотек и плагинов). Это позволяет легко делиться артефактами внутри команды или организации, а также использовать общедоступные артефакты.

6. Упрощение CI/CD:
Стандартизированная структура и процессы сборки Maven упрощают интеграцию с системами непрерывной интеграции и доставки (CI/CD), такими как Jenkins, GitLab CI, Travis CI и другими.

7. Совместимость с IDE:
Большинство современных IDE (например, IntelliJ IDEA, Eclipse) имеют встроенную поддержку Maven, что делает разработку более удобной и продуктивной.
Использование Maven структуры проекта упрощает совместную работу, автоматизирует процессы сборки и развёртывания, а также помогает поддерживать проекты в актуальном состоянии с минимальными усилиями.






